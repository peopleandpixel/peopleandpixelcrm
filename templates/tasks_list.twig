{% extends 'layout.twig' %}
{% block content %}
<section class="space-y-4">
  <div class="card bg-base-200 border border-base-300">
    <div class="card-body p-4">
      <div class="flex flex-wrap items-center justify-between gap-3">
        <h2 id="tasks-title" class="text-2xl font-bold">{{ __('Tasks')|e }}</h2>
        <div class="flex items-center gap-2">
          {% include 'partials/dynamic_search.twig' with { path: path|default(current_path()), q: q|default(''), sort: sort|default('due_date'), dir: dir|default('asc') } %}
          <form method="get" action="{{ path|default(current_path()) }}" class="flex items-center gap-2">
            <input type="hidden" name="q" value="{{ q|default('')|e }}">
            <label class="label hidden sm:flex"><span class="label-text pr-2">{{ __('Sort')|e }}:</span>
              <select name="sort" class="select select-bordered select-sm" aria-label="{{ __('Sort')|e }}">
                {% set so = sort|default('due_date') %}
                <option value="due_date" {{ so=='due_date' ? 'selected' : '' }}>{{ __('Due date')|e }}</option>
                <option value="status" {{ so=='status' ? 'selected' : '' }}>{{ __('Status')|e }}</option>
                <option value="title" {{ so=='title' ? 'selected' : '' }}>{{ __('Title')|e }}</option>
                <option value="contact_name" {{ so=='contact_name' ? 'selected' : '' }}>{{ __('Contact')|e }}</option>
              </select>
            </label>
            <label class="label hidden sm:flex"><span class="label-text pr-2">{{ __('Dir')|e }}:</span>
              {% set di = dir|default('asc') %}
              <select name="dir" class="select select-bordered select-sm" aria-label="{{ __('Direction')|e }}">
                <option value="asc" {{ di=='asc' ? 'selected' : '' }}>{{ __('Asc')|e }}</option>
                <option value="desc" {{ di=='desc' ? 'selected' : '' }}>{{ __('Desc')|e }}</option>
              </select>
            </label>
            <label class="label hidden md:flex"><span class="label-text pr-2">{{ __('Per')|e }}:</span>
              {% set pp = (per|default(10))|int %}
              <select name="per" class="select select-bordered select-sm" aria-label="{{ __('Per page')|e }}">
                {% for n in [10,20,50,100] %}
                  <option value="{{ n }}" {{ pp==n ? 'selected' : '' }}>{{ n }}</option>
                {% endfor %}
              </select>
            </label>
            <button class="btn btn-sm" type="submit">{{ __('Apply')|e }}</button>
          </form>
          {% if can('tasks','create') %}<a class="btn btn-primary" href="{{ url('/tasks/new') }}">+ {{ __('Add Task')|e }}</a>{% endif %}
        </div>
      </div>
      {% if counts is defined and counts %}
        <p class="opacity-80">
          <strong>{{ __('Open')|e }}:</strong> {{ (counts.open|default(0))|int }}
          &nbsp;|&nbsp;
          <strong>{{ __('Done')|e }}:</strong> {{ (counts.done|default(0))|int }}
        </p>
      {% endif %}
    </div>
  </div>

  <div id="kanban-csrf" class="hidden">{{ csrf_field()|raw }}</div>

  {# Trello-like board grouped by status #}
  {% set statuses = [
    {key: 'open', label: __('Open')},
    {key: 'in_progress', label: __('In progress')},
    {key: 'review', label: __('In review')},
    {key: 'blocked', label: __('Blocked')},
    {key: 'done', label: __('Done')},
  ] %}

  {% set grouped = {} %}
  {% for s in statuses %}
    {% set _ = grouped|merge({ (s.key): [] }) %}
  {% endfor %}
  {% set grouped = grouped %}
  {% for t in tasks %}
    {% set k = t.status|default('open') %}
    {% set col = grouped[k]|default([]) %}
    {% set col = col|merge([t]) %}
    {% set grouped = grouped|merge({ (k): col }) %}
  {% endfor %}

  {% set totalCount = total|default(tasks|length)|int %}
  {% if totalCount == 0 %}
    <div class="card bg-base-200 border border-base-300">
      <div class="card-body items-center text-center">
        <div class="text-5xl mb-2" aria-hidden="true">✅</div>
        <h3 class="text-lg font-semibold mb-1">{{ __('No tasks yet')|e }}</h3>
        <p class="opacity-80 mb-3">{{ __('Create your first task to get started.')|e }}</p>
        {% if can('tasks','create') %}
          <a class="btn btn-primary" href="{{ url('/tasks/new') }}">+ {{ __('Add Task')|e }}</a>
        {% endif %}
      </div>
    </div>
  {% endif %}

  <div id="kanban-board" class="flex gap-4 overflow-x-auto pb-2 snap-x snap-mandatory" role="list" aria-labelledby="tasks-title">
    {% for s in statuses %}
      {% set cards = grouped[s.key]|default([]) %}
      <div class="min-w-[240px] w-64 sm:w-72 bg-base-200 rounded-lg p-3 flex-shrink-0 snap-center" data-status="{{ s.key }}" role="group" aria-labelledby="col-{{ s.key }}-title">
        <div class="flex items-center justify-between mb-2">
          <h3 id="col-{{ s.key }}-title" class="font-semibold inline-flex items-center gap-2">
            <span class="w-2 h-2 rounded-full {% if s.key=='done' %}bg-green-500{% elseif s.key=='blocked' %}bg-red-500{% elseif s.key=='review' %}bg-sky-500{% elseif s.key=='in_progress' %}bg-amber-500{% else %}bg-slate-400{% endif %}"></span>
            {{ s.label|e }}
          </h3>
          <span class="badge column-count" aria-label="{{ __('Count')|e }}">{{ cards|length }}</span>
        </div>
        <div class="space-y-3 column-cards min-h-[20px]" data-dropzone="true" role="list">
          {% for it in cards %}
            <div class="card bg-base-100 shadow-sm border border-base-300" draggable="true" data-id="{{ it.id|int }}" role="listitem">
              <div class="card-body p-3 gap-2">
                <div class="flex items-start justify-between">
                  <a href="{{ url('/tasks/view', {id: it.id}) }}" class="font-medium hover:underline line-clamp-2">{{ it.title|default('#'~it.id)|e }}</a>
                  <a href="{{ url('/tasks/edit', {id: it.id}) }}" class="btn btn-ghost btn-xs">{{ __('Edit')|e }}</a>
                </div>
                <div class="flex flex-wrap gap-2 text-sm opacity-80">
                  {% if it.project_name %}<span class="badge badge-ghost">{{ it.project_name|e }}</span>{% endif %}
                  {% if it.contact_name %}<span class="badge badge-outline">{{ it.contact_name|e }}</span>{% endif %}
                  {% if it.employee_name %}<span class="badge badge-info badge-outline">{{ it.employee_name|e }}</span>{% endif %}
                  {% if it.tags is defined and it.tags %}
                    {% for tg in it.tags %}
                      <span class="badge badge-ghost">#{{ tg|e }}</span>
                    {% endfor %}
                  {% endif %}
                </div>
                <div class="flex items-center justify-between text-sm">
                  <div class="flex items-center gap-2">
                    {% if it.due_date %}
                      <span class="badge {% if s.key == 'done' %}badge-success{% elseif it.due_date < ("now"|date('Y-m-d')) %}badge-error{% else %}badge-warning{% endif %} badge-outline">{{ __('Due')|e }} {{ it.due_date|e }}</span>
                    {% endif %}
                    {% if it.reminder_at %}
                      <span class="badge {% if it.reminder_at <= ("now"|date('c')) %}badge-error{% else %}badge-info{% endif %} badge-outline">{{ __('Reminder')|e }} {{ it.reminder_at|e }}</span>
                    {% endif %}
                    {% if it.done_date %}
                      <span class="badge badge-success badge-outline">{{ __('Done')|e }} {{ it.done_date|e }}</span>
                    {% endif %}
                    <span class="badge badge-warning gap-1 hidden" data-running-info data-task-id="{{ it.id|int }}">
                      <span aria-hidden="true">⏱️</span>
                      <span data-elapsed>00:00:00</span>
                      <span class="opacity-70">• {{ __('Total')|e }} <span data-total>0.00</span>h</span>
                    </span>
                  </div>
                  <div class="flex flex-wrap items-center gap-2">
                    <form method="post" action="{{ url('/tasks/time/start') }}" class="inline">
                      {{ csrf_field()|raw }}
                      <input type="hidden" name="id" value="{{ it.id|int }}">
                      <button type="submit" class="btn btn-xs btn-success inline-flex whitespace-nowrap" data-action="time-start" data-id="{{ it.id|int }}"><span aria-hidden="true">⏱️</span> {{ __('Start Timer')|e }}</button>
                    </form>
                    <form method="post" action="{{ url('/tasks/time/stop') }}" class="inline">
                      {{ csrf_field()|raw }}
                      <input type="hidden" name="id" value="{{ it.id|int }}">
                      <button type="submit" class="btn btn-xs inline-flex whitespace-nowrap" data-action="time-stop" data-id="{{ it.id|int }}"><span aria-hidden="true">⏹</span> {{ __('Stop Timer')|e }}</button>
                    </form>
                    <form method="post" action="{{ url('/tasks/delete') }}" onsubmit="return confirm('{{ __('Are you sure?')|e }}');">
                      {{ csrf_field()|raw }}
                      <input type="hidden" name="id" value="{{ it.id|int }}">
                      <button class="btn btn-ghost btn-xs" type="submit">{{ __('Delete')|e }}</button>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          {% else %}
            <div class="text-sm opacity-70">{{ __('No tasks')|e }}</div>
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  </div>

  <script>
    (function(){
      const board = document.getElementById('kanban-board');
      if (!board) return;
      let dragEl = null;
      let originCol = null;
      let originNext = null;
      const getToken = () => {
        const c1 = document.querySelector('#kanban-csrf input[type="hidden"]');
        if (c1 && c1.value) return c1.value;
        const c2 = document.querySelector('input[name="_csrf"]');
        return c2 ? c2.value : '';
      };
      const updateCounts = () => {
        board.querySelectorAll('[data-status]').forEach(col => {
          const countEl = col.querySelector('.column-count');
          const cardsEl = col.querySelector('.column-cards');
          const n = cardsEl ? cardsEl.querySelectorAll('.card').length : 0;
          if (countEl) countEl.textContent = n;
        });
      };
      const clearHighlights = () => {
        board.querySelectorAll('.column-cards').forEach(z => z.classList.remove('ring', 'ring-primary'));
      };
      board.addEventListener('dragstart', (e) => {
        const target = e.target;
        const card = target && target.closest ? target.closest('.card') : null;
        if (!card) return;
        dragEl = card;
        originCol = card.parentElement; // .column-cards
        originNext = card.nextElementSibling;
        e.dataTransfer.effectAllowed = 'move';
        try { e.dataTransfer.setData('text/plain', card.getAttribute('data-id') || ''); } catch(_){}
        setTimeout(() => card.classList.add('opacity-50'), 0);
      });
      board.addEventListener('dragend', () => {
        if (dragEl) dragEl.classList.remove('opacity-50');
        dragEl = null; originCol = null; originNext = null; clearHighlights();
      });
      board.addEventListener('dragover', (e) => {
        const zone = e.target && e.target.closest ? e.target.closest('.column-cards') : null;
        if (!zone) return;
        e.preventDefault();
        clearHighlights();
        zone.classList.add('ring', 'ring-primary');
      });
      board.addEventListener('drop', async (e) => {
        const zone = e.target && e.target.closest ? e.target.closest('.column-cards') : null;
        if (!zone || !dragEl) return;
        e.preventDefault();
        clearHighlights();
        const col = zone.closest('[data-status]');
        const status = col ? col.getAttribute('data-status') : '';
        const id = dragEl.getAttribute('data-id');
        if (!status || !id) return;
        // Optimistic move
        zone.appendChild(dragEl);
        updateCounts();
        try {
          const res = await fetch('{{ url('/tasks/move') }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
              'X-CSRF-Token': getToken()
            },
            body: new URLSearchParams({ id: id, status: status })
          });
          const json = await res.json().catch(() => ({}));
          if (!res.ok || !json.ok) {
            // rollback
            if (originCol) {
              if (originNext && originNext.parentElement === originCol) {
                originCol.insertBefore(dragEl, originNext);
              } else {
                originCol.appendChild(dragEl);
              }
              updateCounts();
            }
            alert((json && json.error) ? ('Error: ' + json.error) : 'Failed to move task');
          }
        } catch(err) {
          // rollback
          if (originCol) {
            if (originNext && originNext.parentElement === originCol) {
              originCol.insertBefore(dragEl, originNext);
            } else {
              originCol.appendChild(dragEl);
            }
            updateCounts();
          }
          alert('Network error');
        }
      });

      // Time tracking buttons (Start/Stop) via event delegation
      board.addEventListener('click', async (e) => {
        const btn = e.target && e.target.closest ? e.target.closest('button[data-action]') : null;
        if (!btn) return;
        const action = btn.getAttribute('data-action');
        const id = btn.getAttribute('data-id');
        if (!action || !id) return;
        const endpoint = action === 'time-start' ? '{{ url('/tasks/time/start') }}' : (action === 'time-stop' ? '{{ url('/tasks/time/stop') }}' : null);
        if (!endpoint) return;
        const form = btn.closest ? btn.closest('form') : null;
        if (form) { e.preventDefault(); }
        btn.disabled = true;
        try {
          const res = await fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': getToken()
            },
            body: new URLSearchParams({ id: id })
          });
          const json = await res.json().catch(() => ({}));
          if (!res.ok || !json.ok) {
            alert((json && json.error) ? ('Error: ' + json.error) : 'Failed to perform action');
          } else {
            // Optional: brief visual feedback
            btn.classList.add('btn-active');
            setTimeout(() => btn.classList.remove('btn-active'), 500);
            // Refresh running state shortly after action
            setTimeout(checkRunning, 300);
          }
        } catch(err) {
          alert('Network error');
        } finally {
          btn.disabled = false;
        }
      });

      // Running timer handling on board: hide start buttons if any timer is running,
      // and show per-task badge with current elapsed and user total for that task
      const startBtnsSelector = 'button[data-action="time-start"]';
      let tickIv = null;
      let startMs = null;
      let runningTaskId = 0;
      let totalSeconds = 0;

      function fmt(n){ return n < 10 ? '0' + n : '' + n; }
      function renderElapsed(){
        if (startMs == null || !runningTaskId) return;
        const now = Date.now();
        let diff = Math.max(0, Math.floor((now - startMs) / 1000));
        const h = Math.floor(diff / 3600); diff -= h*3600;
        const m = Math.floor(diff / 60); const s = diff - m*60;
        const text = fmt(h) + ':' + fmt(m) + ':' + fmt(s);
        const badge = board.querySelector('[data-running-info][data-task-id="' + runningTaskId + '"]');
        if (badge){
          const el = badge.querySelector('[data-elapsed]');
          if (el) el.textContent = text;
        }
      }
      function applyNoRunning(){
        // show all start buttons
        board.querySelectorAll(startBtnsSelector).forEach(b => b.classList.remove('hidden'));
        // hide all running info badges
        board.querySelectorAll('[data-running-info]').forEach(el => el.classList.add('hidden'));
        if (tickIv){ clearInterval(tickIv); tickIv = null; }
        startMs = null; runningTaskId = 0; totalSeconds = 0;
      }
      function applyRunning(r){
        // Validate running payload before hiding Start buttons
        const tid = r && r.task_id ? r.task_id : 0;
        let iso = r && (r.iso_start || (r.date && r.start_time ? (r.date + 'T' + r.start_time + ':00') : null));
        const parsed = iso ? Date.parse(iso) : NaN;
        if (!tid || isNaN(parsed)) { applyNoRunning(); return; }
        // hide all start buttons when there is a valid running timer
        board.querySelectorAll(startBtnsSelector).forEach(b => b.classList.add('hidden'));
        // hide all badges, then show only for the running task
        board.querySelectorAll('[data-running-info]').forEach(el => el.classList.add('hidden'));
        runningTaskId = tid;
        const badge = board.querySelector('[data-running-info][data-task-id="' + runningTaskId + '"]');
        startMs = parsed;
        totalSeconds = (r.user_total_seconds_for_task || 0);
        if (badge){
          const totalEl = badge.querySelector('[data-total]');
          if (totalEl){ totalEl.textContent = (totalSeconds/3600).toFixed(2); }
          badge.classList.remove('hidden');
        }
        if (tickIv){ clearInterval(tickIv); }
        tickIv = setInterval(renderElapsed, 1000);
        renderElapsed();
      }
      async function checkRunning(){
        try {
          const res = await fetch('{{ url('/times/running') }}', { headers: { 'Accept': 'application/json' } });
          const json = await res.json().catch(() => null);
          if (!json || !json.ok){ throw new Error('bad'); }
          const r = json.running;
          if (!r){ applyNoRunning(); return; }
          applyRunning(r);
        } catch(e){
          // On any error, assume no running timer to keep Start buttons visible
          applyNoRunning();
        }
      }
      // initial check and polling
      applyNoRunning();
      checkRunning();
      setInterval(checkRunning, 15000);
    })();
  </script>

  <div class="mt-4">
    {% set extra = {q: q|default(''), per: (per|default(10))|int} %}
    {{ paginate(total|default(tasks|length)|int, page|default(1)|int, per|default(10)|int, path|default(current_path()), extra|merge({sort: sort|default('due_date'), dir: dir|default('asc')}))|raw }}
  </div>
</section>
{% endblock %}